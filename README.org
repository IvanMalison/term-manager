
term-manager ([[http://melpa.org/#/term-manager][file:http://melpa.org/packages/term-manager-badge.svg]]) is used to support term-projectile
([[http://melpa.org/#/term-projectile][file:http://melpa.org/packages/term-projectile-badge.svg]]). term-manager can be used without term-projectile, but no such use case is currently known.

term-projectile manages terminals based on the current projectile context.

Install from MELPA with ~M-x package-install term-projectile~. See the [[https://github.com/milkypostman/melpa][melpa repository]] for details about how to set up MELPA if you have not already done so.

* Setup

** Emacs Configuration
The author prefers to set up term-projectile using the following [[https://github.com/abo-abo/hydra][hydra]]:
#+BEGIN_SRC emacs-lisp
  (defhydra imalison:term-hydra (global-map  "C-c 7")
    "term"
    ("n" term-projectile-forward)
    ("p" term-projectile-backward)
    ("c" term-projectile-create-new))
#+END_SRC

 When term-projectile-forward is executed in a projectile project where no terminal currently exists, a new ansi-term instance will be created. If one already exists, pressing that key binding will take the user to the existing ansi-term instance for that project.

** Terminal Support
You will need to add something like the following to your shell's configuration file
#+BEGIN_SRC sh
  function environment_variable_exists {
      eval "value=\"\${$1+x}\""
      [ ! -z $value ]
  }

  function emacs_ansi_term_support {
      echo -e "\033AnSiTu" "$LOGNAME" # $LOGNAME is more portable than using whoami.
      echo -e "\033AnSiTc" "$(pwd)"
      if [ $(uname) = "SunOS" ]; then
          # The -f option does something else on SunOS and is not needed anyway.
          hostname_options="";
      else
          hostname_options="-f";
      fi
      # XXX/TODO: This disables correct setting of the current directory
      # when in an sshed shell when inside of emacs
      # echo -e "\033AnSiTh" "$(hostname $hostname_options)" # Using the -f option can #
      # cause problems on some OSes.
  }
#+END_SRC
** zsh
#+BEGIN_SRC sh
  if environment_variable_exists INSIDE_EMACS; then
      if [[ $INSIDE_EMACS == *"term"* ]]
      then
          add-zsh-hook precmd emacs_ansi_term_support
      fi
  fi
#+END_SRC
** bash
#+BEGIN_SRC sh
  if environment_variable_exists INSIDE_EMACS; then
      if [[ $INSIDE_EMACS == *"term"* ]]
      then
          PROMPT_COMMAND='emacs_ansi_term_support'
      fi
  fi
#+END_SRC
